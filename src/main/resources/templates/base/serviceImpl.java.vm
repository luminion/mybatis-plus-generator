package ${package.ServiceImpl};

## ------参数设置----start
###foreach($field in ${table.fields})
##    #if(${field.keyFlag})
##        #set($primaryKeyPropertyType=${field.propertyType})
##        #break
##    #end
###end
#set($entityInsertDTO = "${entity}InsertDTO")
#set($entityUpdateDTO = "${entity}UpdateDTO")
#set($entityVO = "${entity}VO")
#if(${selectDTO.classFullName})
    #set($entitySelectDTO = ${selectDTO.clazz("${entity}")})
    #if(${generateSelect}||${generateExport})
import ${selectDTO.classFullName};
    #end
#else
    #set($entitySelectDTO = "${entity}SelectDTO")
    #if(${generateSelect}||${generateExport})
import ${basePackage}.${package4DTO}.${entity}SelectDTO;
    #end
#end
## ------参数设置----end
#if(${generateImport}||${generateExport})
import cn.idev.excel.EasyExcel;
##import cn.idev.excel.write.style.column.LongestMatchColumnWidthStyleStrategy;
#end
#if(${generateSelect}||${generateExport})
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
#end
#if(${generateInsert}||${generateSelect})
import com.baomidou.mybatisplus.core.metadata.TableInfo;
import com.baomidou.mybatisplus.core.metadata.TableInfoHelper;
#end
## ------默认导入 start----------
import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
#if(${generateService})
import ${package.Service}.${table.serviceName};
#end
import ${superServiceImplClassPackage};
import org.springframework.stereotype.Service;
## ------默认导入 end----------
#if(${generateSelect}||${generateExport})
import ${basePackage}.${package4VO}.${entityVO};
#end
#if(${generateInsert}||${generateImport})
import ${basePackage}.${package4DTO}.${entityInsertDTO};
#end
#if(${generateUpdate})
import ${basePackage}.${package4DTO}.${entityUpdateDTO};
#end
import org.springframework.stereotype.Service;
#if(${generateInsert}||${generateUpdate}||${generateImport}||${generateSelect})
import org.springframework.beans.BeanUtils;
#end

#if(${generateSelect}||${generateDelete})
import java.io.Serializable;
#end
#if(${generateImport})
import java.io.InputStream;
#end
#if(${generateImport}||${generateExport})
import java.io.OutputStream;
#end
#if(${generateImport})
import java.util.stream.Collectors;
#end
import java.util.*;
## map反射用
##import java.lang.reflect.Field;
##import java.lang.reflect.Modifier;

/**
 * $!{table.comment}服务实现类
 *
 * @author ${author}
 * @since ${date}
 */
@Service
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>()#if(${generateService}), ${table.serviceName}#end {

}
#else
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}>#if(${generateService}) implements ${table.serviceName}#end {
    #if(${generateInsert})

    #if(${generateService})
    @Override
    #end
    public Object insertByDTO(${entityInsertDTO} s) {
##    public Object insertByDTO(Object s) {
##//        ${entityInsertDTO} dto = (${entityInsertDTO}) s;
        ${entity} entity = new ${entity}();
        BeanUtils.copyProperties(s, entity);
        super.save(entity);
        TableInfo tableInfo = TableInfoHelper.getTableInfo(getEntityClass());
        return tableInfo.getPropertyValue(entity, tableInfo.getKeyProperty());
    }
    #end
    #if(${generateUpdate})

    #if(${generateService})
    @Override
    #end
    public boolean updateByDTO(${entityUpdateDTO} s) {
##    public boolean updateByDTO(Object s) {
##//        ${entityUpdateDTO} dto = (${entityUpdateDTO}) s;
        ${entity} entity = new ${entity}();
        BeanUtils.copyProperties(s, entity);
        return super.updateById(entity);
    }
    #end
    #if(${generateDelete})

    @Override
    public boolean removeById(Serializable id) {
        return super.removeById(id);
    }
    #end
    #if(${generateSelect})

    #if(${generateService})
    @Override
    #end
    public ${entityVO} voById(Serializable id) {
        return getBaseMapper().voById(id);
    }

    #if(${generateService})
    @Override
    #end
    public ${entityVO} voByDTO(${entitySelectDTO} s) {
        return getBaseMapper().voByDTO(s);
    }

    #if(${generateService})
    @Override
    #end
    public List<${entityVO}> voList(${entitySelectDTO} s) {
        return getBaseMapper().voList(s);
    }

    #if(${generateService})
    @Override
    #end
    public IPage<${entityVO}> voPage(${entitySelectDTO} s, Long current, Long size) {
        return getBaseMapper().voPage(s, current, size);
    }
    #end
    #if(${generateImport})

    #if(${generateService})
    @Override
    #end
    public void excelTemplate(OutputStream os, Class<?> clazz) {
##        EasyExcel.write(os, clazz).registerWriteHandler(new LongestMatchColumnWidthStyleStrategy()).sheet().doWrite(Collections.emptyList());
        EasyExcel.write(os, clazz).sheet().doWrite(Collections.emptyList());
    }

    #if(${generateService})
    @Override
    #end
    public int excelImport(InputStream is, Class<?> clazz) {
//        List<${entityInsertDTO}> dataList = EasyExcel.read(is).head(clazz).sheet().doReadSync();
        List<?> dataList = EasyExcel.read(is).head(clazz).sheet().doReadSync();
        List<${entity}> entityList = dataList.stream().map(e -> {
            ${entity} entity = new ${entity}();
            BeanUtils.copyProperties(e, entity);
            return entity;
        }).collect(Collectors.toList());
        super.saveBatch(entityList);
        return entityList.size();
    }
    #end
    #if(${generateExport})

    #if(${generateService})
    @Override
    #end
    public void excelExport(${entitySelectDTO} s, OutputStream os, Class<?> clazz, Long current, Long size, String... includeFields) {
        List<${entityVO}> voList = getBaseMapper().voPage(s, current, size).getRecords();
##        EasyExcel.write(os, clazz).includeColumnFieldNames(Arrays.asList(includeFields))
##            .registerWriteHandler(new LongestMatchColumnWidthStyleStrategy())
##            .sheet().doWrite(voList);
        EasyExcel.write(os, clazz).includeColumnFieldNames(Arrays.asList(includeFields)).sheet().doWrite(voList);
    }
    #end

}
#end
