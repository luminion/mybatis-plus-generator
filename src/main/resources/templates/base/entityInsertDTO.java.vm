package ${basePackage}.${package4DTO};

#foreach($pkg in ${importEntityFrameworkPackages})
import ${pkg};
#end
#if(${generateImport})
import com.alibaba.excel.annotation.ExcelIgnoreUnannotated;
import com.alibaba.excel.annotation.ExcelProperty;
#end
#if(${validated})
## ---字段非空验证---
    #foreach($field in ${table.fields})
        #if(!${field.metaInfo.nullable} && !${field.metaInfo.defaultValue} && !${field.keyFlag} &&${field.propertyType}!="String")
import ${javaApiPackage}.validation.constraints.NotNull;
            #break
        #end
    #end
## ---字符串非空验证---
    #foreach($field in ${table.fields})
        #if(!${field.metaInfo.nullable} && !${field.metaInfo.defaultValue} && !${field.keyFlag} &&${field.propertyType}=="String")
import ${javaApiPackage}.validation.constraints.NotBlank;
            #break
        #end
    #end
## ---字符串长度验证---
    #foreach($field in ${table.fields})
        #if(${field.propertyType}=="String")
import ${javaApiPackage}.validation.constraints.Size;
            #break
        #end
    #end
#end

#foreach($pkg in ${importEntityJavaPackages})
import ${pkg};
#end

/**
 * $!{table.comment}-新增DTO
 *
 * @author ${author}
 * @since ${date}
#if(${extraClassLinkComment})
 * @see ${package.Entity}.${entity}
 * @see ${package.Mapper}.${table.mapperName}
 * @see ${package.ServiceImpl}.${table.serviceImplName}
#end
 */
#foreach($an in ${entityClassAnnotations})
    ${an.displayName}
#end
#if(${generateImport})
@ExcelIgnoreUnannotated
#end
public class ${entity}InsertDTO {
## ----------  BEGIN 字段循环遍历  ----------
#foreach($field in ${table.fields})
## ----------  BEGIN 生成判断  ----------
#if(${field.keyFlag})
#elseif(${field.fill} && (${field.fill}=="INSERT" || ${field.fill}=="INSERT_UPDATE"))
#elseif(${field.versionField})
#elseif(${field.logicDeleteField})
#elseif($editExcludeColumns.contains(${field.columnName}))
#else

#if(${field.keyFlag})
#set($keyPropertyName=${field.propertyName})
#end
#if("$!field.comment" != "")
  #if(${entityFieldUseJavaDoc})
    /**
     * ${field.comment}
     */
  #end
#end
#foreach($an in ${field.annotationAttributesList})
    ${an.displayName}
#end
    #if(${validated})## 参数校验
        #if(!${field.metaInfo.nullable} && !${field.metaInfo.defaultValue})## 非空
            #if(${field.propertyType} == "String")
    @NotBlank(message = "${field.comment}为必填项")
                #else
    @NotNull(message = "${field.comment}为必填项")
            #end
        #end
        #if(${field.propertyType} == "String")## 字符串长度
    @Size(message = "${field.comment}长度不能超过${field.metaInfo.length}", max = ${field.metaInfo.length})
        #end
    #end
    #if(${generateImport})## excel导入
    @ExcelProperty(value = "${field.comment}")
    #end
    private ${field.propertyType} ${field.propertyName};
#end
## ----------  END 生成判断  ----------
#end
## ----------  END 字段循环遍历  ----------
#if(!${entityLombokModel})
#foreach($field in ${table.fields})
#if(${field.keyFlag})
#elseif(${field.fill} && (${field.fill}=="INSERT" || ${field.fill}=="INSERT_UPDATE"))
#elseif(${field.versionField})
#elseif(${field.logicDeleteField})
#elseif($editExcludeColumns.contains(${field.columnName}))
#else
  #if(${field.propertyType.equals("boolean")})
    #set($getprefix="is")
  #else
    #set($getprefix="get")
  #end

    public ${field.propertyType} ${getprefix}${field.capitalName}() {
        return ${field.propertyName};
    }

  #if(${chainModel})
    public ${entity} set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
  #else
    public void set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
  #end
        this.${field.propertyName} = ${field.propertyName};
  #if(${chainModel})
        return this;
  #end
    }
#end
#end
## --foreach end---
#end
#if(!${entityLombokModel} && ${entityToString})

    @Override
    public String toString() {
        return "${entity}{" +
  #foreach($field in ${table.fields})
  #if(${field.keyFlag})
  #elseif(${field.fill} && (${field.fill}=="INSERT" || ${field.fill}=="INSERT_UPDATE"))
  #elseif(${field.versionField})
  #elseif(${field.logicDeleteField})
  #elseif($editExcludeColumns.contains(${field.columnName}))
  #else
    #if($!{foreach.index}==0)
        "${field.propertyName} = " + ${field.propertyName} +
    #else
        ", ${field.propertyName} = " + ${field.propertyName} +
    #end
  #end
  #end
        "}";
    }
#end
}
