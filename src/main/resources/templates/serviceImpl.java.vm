package ${package.serviceImpl};

import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
#if(${generate.service})
import ${package.Service}.${table.serviceName};
#end
import ${superServiceImplClassPackage};
import org.springframework.stereotype.Service;

/**
 * <p>
 * $!{table.comment} 服务实现类
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Service
#if(${enhancer})
public class ${table.serviceImplName} extends ${superServiceImplClass}<${mapper}, ${entity}> implements#if(${generate.service}) ${service},#end EnhancedService<${queryVO}> {
#else
public class ${table.serviceImplName} extends ${superServiceImplClass}<${mapper}, ${entity}>#if(${generate.service}) implements ${service}#end {
#end
    #if(${generateQuery}||${generateExport})
    
    #if(${generate.service} || ${enhancer})
    @Override
    #end
    public ${queryVO} voById(Serializable id) {
        #if(${enhancer})
        return ${enhanceMethod}.voById(id);
        #else
        HashMap<String, Object> map = new HashMap<>();
        map.put(TableInfoHelper.getTableInfo(getEntityClass()).getKeyProperty(), id);
        IPage<${queryVO}> page = new Page<>(1L, 1L);
        List<${queryVO}> vs = getBaseMapper().voQuery(map, page);
        if (vs == null || vs.isEmpty()) return null;
        if (page.getTotal() > 1) throw new TooManyResultsException("Expected one result (or null) to be returned by id, but found:" + page.getTotal());
        return vs.get(0);
        #end
    }

    #if(${generate.service} || ${enhancer})
    @Override
    #end
    public List<${queryVO}> voList(${entityQueryDTO} param) {
        #if(${enhancer})
        return ${enhanceMethod}.voList(param);
        #else
        return getBaseMapper().voQuery(param, null);
        #end
    }

    #if(${generate.service} || ${enhancer})
    @Override
    #end
    public IPage<${queryVO}> voPage(${entityQueryDTO} param, Long current, Long size) {
        #if(${enhancer})
        return ${enhanceMethod}.voPage(param, current, size);
        #else
        if (current == null || current < 1) current = 1L;
        if (size == null) size = 10L;
        Page<${queryVO}> page = new Page<>(current, size);
        List<${queryVO}> voList = getBaseMapper().voQuery(param, page);
        page.setRecords(voList);
        return page;
        #end
    }
    #end
    #if(${generateExport})

    #if(${generate.service} || ${enhancer})
    @Override
    #end
    public void excelExport(${entityQueryDTO} param, OutputStream os, Class<?> clazz, Long current, Long size, String... includeFields) {
        #if(${enhancer})
        ${enhanceMethod}.excelExport(param, os, clazz, current, size, includeFields);
        #else
        List<${queryVO}> voList = this.voPage(param, current, size).getRecords();
        ${excelApiClass}.write(os, clazz).includeColumnFieldNames(Arrays.asList(includeFields)).registerWriteHandler(new LongestMatchColumnWidthStyleStrategy()).sheet().doWrite(voList);
        #end
    }
    #end
    #if(${generateImport})

    #if(${generate.service} || ${enhancer})@Override#end
    public void excelTemplate(OutputStream os, Class<?> clazz) {
        #if(${enhancer})
        ${enhanceMethod}.excelTemplate(os, clazz);
        #else
        ${excelApiClass}.write(os, clazz).sheet().doWrite(Collections.emptyList());
        #end
    }

    #if(${generate.service} || ${enhancer})@Override#end
    public int excelImport(InputStream is, Class<?> clazz) {
        #if(${enhancer})
//        List<${entityInsertDTO}> dataList = ${excelApiClass}.read(is).head(clazz).sheet().doReadSync();
        return ${enhanceMethod}.excelImport(is, clazz);
        #else
        List<?> dataList = ${excelApiClass}.read(is).head(clazz).sheet().doReadSync();
        List<${entity}> entityList = dataList.stream().map(e -> {
//            ${entityInsertDTO} dto = (${entityInsertDTO}) e;
            ${entity} entity = new ${entity}();
            BeanUtils.copyProperties(e, entity);
            return entity;
        }).collect(Collectors.toList());
        super.saveBatch(entityList);
        return entityList.size();
        #end
    }
    #end
    #if(${generateInsert})

    #if(${generate.service} || ${enhancer})@Override#end
    public Object insertByDTO(Object param) {
//        ${sourceEntityInsertDTO} dto = (${sourceEntityInsertDTO}) param;
        #if(${enhancer})
        return ${enhanceMethod}.insertByDTO(param);    
        #else
        ${entity} entity = new ${entity}();
        BeanUtils.copyProperties(param, entity);
        super.save(entity);
        TableInfo tableInfo = TableInfoHelper.getTableInfo(getEntityClass());
        return tableInfo.getPropertyValue(entity, tableInfo.getKeyProperty());
        #end
    }
    #end
    #if(${generateUpdate})

    #if(${generate.service} || ${enhancer})@Override#end
    public boolean updateByDTO(Object param) {
//        ${sourceEntityUpdateDTO} dto = (${sourceEntityUpdateDTO}) param;
        #if(${enhancer})
        return ${enhanceMethod}.updateByDTO(param);
        #else
        ${entity} entity = new ${entity}();
        BeanUtils.copyProperties(param, entity);
        return super.updateById(entity);
        #end
    }
    #end
    #if(${generateDelete})

    @Override
    public boolean removeById(Serializable id) {
        return super.removeById(id);
    }
    #end
}
