package ${package.entity};
#if($entityImportPackages4Framework.size()>0)

#end
#foreach($pkg in ${entityImportPackages4Framework})
import ${pkg};
#end
#if($entityImportPackages4Java.size()>0)

#end
#foreach($pkg in ${entityImportPackages4Java})
import ${pkg};
#end

/**
 * $!{table.comment}
 *
 * @author ${author}
#if(${commentLink})
 * @see ${class.mapper}
 * @see ${class.serviceImpl}
#end
 * @since ${date}
 */
#if(${lombok})
@Data
    #if(${chainModel})
@Accessors(chain = true)
    #end
    #if(${superEntityClass}||${activeRecord})
@EqualsAndHashCode(callSuper = true)
    #end
#end
#if(${table.convert})
@TableName("${schemaName}${table.name}")
#end
#if(${springdoc})
@Schema(description = "$!{table.comment}")
#elseif(${swagger})
@ApiModel(description = "$!{table.comment}")
#end
#if($generateExport && $queryVOExtendsEntity)
@ExcelIgnoreUnannotated
#end
#if(${superEntityClass})
public class ${entity} extends ${superEntityClass}#if(${activeRecord})<${entity}>#end {
#elseif(${activeRecord})
public class ${entity} extends Model<${entity}> {
#elseif(${entitySerialVersionUID})
public class ${entity} implements Serializable {
#else
public class ${entity} {
#end
#if(${entitySerialVersionUID})

    #if(${entitySerialAnnotation})
    @Serial
    #end
    private static final long serialVersionUID = 1L;
#end
## ----------  BEGIN 字段循环遍历  ----------
#foreach($field in ${table.fields})

    #if(${field.keyFlag})
    #set($keyPropertyName=${field.propertyName})
    #end
    #if("$!field.comment" != "")
        #if(${springdoc})
    @Schema(description = "${field.comment}")
        #elseif(${swagger})
    @ApiModelProperty("${field.comment}")
        #else
    /**
     * ${field.comment}
     */
        #end
    #end
    #if(${field.keyFlag})
        #if(${field.keyIdentityFlag})
    @TableId(value = "${field.annotationColumnName}", type = IdType.AUTO)
        #elseif(!$null.isNull(${idType}) && "$!idType" != "")
    @TableId(value = "${field.annotationColumnName}", type = IdType.${idType})
        #elseif(${field.convert})
    @TableId("${field.annotationColumnName}")
        #end
    #elseif(${field.fill})
        #if(${field.convert})
    @TableField(value = "${field.annotationColumnName}", fill = FieldFill.${field.fill})
        #else
    @TableField(fill = FieldFill.${field.fill})
        #end
    #elseif(${field.convert})
    @TableField("${field.annotationColumnName}")
    #end
    #if(${field.versionField})
    @Version
    #end
    #if(${field.logicDeleteField})
    @TableLogic
    #end
    #if($generateExport && $queryVOExtendsEntity && !${field.logicDeleteField})
    @ExcelProperty(value = "${field.comment}")
    #end
    private ${field.propertyType} ${field.propertyName};
#end
## ----------  END 字段循环遍历  ----------
#if(!${lombok})
#foreach($field in ${table.fields})
  #if(${field.propertyType.equals("boolean")})
    #set($getprefix="is")
  #else
    #set($getprefix="get")
  #end

    public ${field.propertyType} ${getprefix}${field.capitalName}() {
        return ${field.propertyName};
    }

  #if(${chainModel})
    public ${entity} set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
  #else
    public void set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
  #end
        this.${field.propertyName} = ${field.propertyName};
  #if(${chainModel})
        return this;
  #end
    }
#end
## --foreach end---
#end
## --end of #if(!${lombok})--
#if(${entityColumnConstant})
  #foreach($field in ${table.fields})

    public static final String ${field.name.toUpperCase()} = "${field.name}";
  #end
#end
#if(${activeRecord})

    @Override
    public Serializable pkVal() {
  #if(${keyPropertyName})
        return this.${keyPropertyName};
  #else
        return null;
  #end
    }
#end
#if(!${lombok})

    @Override
    public String toString() {
        return "${entity}{" +
  #foreach($field in ${table.fields})
    #if($!{foreach.index}==0)
        "${field.propertyName} = " + ${field.propertyName} +
    #else
        ", ${field.propertyName} = " + ${field.propertyName} +
    #end
  #end
        "}";
    }
#end
}
